@page "/addapplicant"
@using Hsf.ApplicationProcess.August2020.Blazor.ApiServices
@using System.Runtime.CompilerServices
@using Hsf.ApplicationProcess.August2020.Blazor.Validators
@using Hsf.ApplicationProcess.August2020.Domain.Validators
@using System.Threading
@using System.Timers
@using FluentValidation
@using FluentValidation.Results
@using Hsf.ApplicationProcess.August2020.Blazor.ViewModels

@inject ApplicantInsertViewModelValidator Val
@inject ApplicantApiService ApiService
@inject IMatToaster Toaster
<link rel="stylesheet" href="css/addApplicant.css" />

<div class="mat-elevation-z3 main-container">
    <h3>Add new applicant to database</h3>

    <EditForm Model="applicant">
        <FluentValidator Validator="Val"></FluentValidator>

        <div class="mat-layout-grid mat-layout-grid-allign-middle">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <MatTextField Label="Name" OnKeyPress="@Update" OnInput="@Update" OnFocus="@Update" OnFocusOut="@Update" @bind-Value="@applicant.name"></MatTextField>
                    <ValidationMessage For="@(() => applicant.name)" />
                    <MatTextField Label="Family name" OnKeyPress="@Update" OnInput="@Update" OnFocus="@Update" OnFocusOut="@Update" @bind-Value="@applicant.familyName"></MatTextField>
                    <ValidationMessage For="@(() => applicant.familyName)" />
                    <MatTextField Label="Address" OnKeyPress="@Update" OnInput="@Update" OnFocus="@Update" OnFocusOut="@Update" @bind-Value="@applicant.address"></MatTextField>
                    <ValidationMessage For="@(() => applicant.address)" />
                    <MatTextField Label="Country" OnKeyPress="@Update" OnInput="@Update" OnFocus="@Update" OnFocusOut="@Update" @bind-Value="@applicant.countryOfOrigin"></MatTextField>
                    <ValidationMessage For="@(() => applicant.countryOfOrigin)" />
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <MatNumericUpDownField Label="Age" OnKeyPress="@Update" OnInput="@Update" OnFocus="@Update" OnFocusOut="@Update" DecimalPlaces=0 Minimum="20" Maximum="60" @bind-Value="@applicant.age"></MatNumericUpDownField>
                    <ValidationMessage For="@(() => applicant.age)" />
                    <MatTextField Label="Email address" OnKeyPress="@Update" OnInput="@Update" OnFocus="@Update" OnFocusOut="@Update" @bind-Value="@applicant.emailAddress"></MatTextField>
                    <ValidationMessage For="@(() => applicant.emailAddress)" />
                    <br />
                    <MatSlideToggle Label="Status" @bind-Value="@applicant.hired"></MatSlideToggle>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <MatButton Label="Submit" OnClick="InsertApplicant" Disabled="@IsSubmitDisabled" Type="submit"></MatButton>
                    <MatButton Label="Reset" Disabled="@IsResetDisabled" OnClick="@ResetData"></MatButton>
                </div>
            </div>
        </div>
    </EditForm>
</div>
@code {

    ApplicantInsertViewModel applicant = new ApplicantInsertViewModel() { address = "adressadress", age = 25, emailAddress = "heniuw@wp.pl", familyName = "Wiśniewski", name = "Endrju" };

    private bool IsResetDisabled => string.IsNullOrEmpty(applicant.address) &&
                                    string.IsNullOrEmpty(applicant.countryOfOrigin) &&
                                    string.IsNullOrEmpty(applicant.emailAddress) &&
                                    string.IsNullOrEmpty(applicant.familyName) &&
                                    string.IsNullOrEmpty(applicant.name) &&
                                    applicant.age == 0;

    private bool IsSubmitDisabled = true;

    public void Show(MatToastType type, string icon = "")
    {
        Toaster.Add("_message", type, "_title", icon, config =>
        {
            config.RequireInteraction = false;

            if (true)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }

    private void ResetData()
    {
        applicant = new ApplicantInsertViewModel();
        IsSubmitDisabled = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Val.CascadeMode = CascadeMode.Stop;
    }

    // Asynchronous fluent validation is not supported in blazor WASM at this moment
    // Workaround is needed - force form re-validation
    private System.Timers.Timer timer;
    protected override async Task OnInitializedAsync()
    {
        timer = new System.Timers.Timer(250);
        timer.Elapsed += this.OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
        timer.Start();
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        Task.Run(async () =>
        {
            await Update();
            StateHasChanged();
        });
    }

    private async Task Update()
    {
        var result = await Val.ValidateAsync(applicant);
        IsSubmitDisabled = !result.IsValid;
        StateHasChanged();
    }

    private async Task<PostInfo> InsertApplicant()
    {
        IsSubmitDisabled = true;
        StateHasChanged();
        await Update();
        if (!IsSubmitDisabled)
        {
            var postResult = await ApiService.InsertNewApplicant(applicant, CancellationToken.None);
            if (postResult.IsSuccess)
            {
                StateHasChanged();
                return postResult;
            }
        }

        var result = await Val.ValidateAsync(applicant);
        var resp = new ResponseCodes()
            .AddCode("Invalid form data", result.Errors.Select(c => c.ErrorMessage).ToArray());
        StateHasChanged();
        return new PostInfo(false, resp);
    }

}