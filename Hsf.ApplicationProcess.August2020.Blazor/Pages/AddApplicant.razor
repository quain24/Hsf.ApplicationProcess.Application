@page "/"
@using Hsf.ApplicationProcess.August2020.Blazor.ApiServices
@using Hsf.ApplicationProcess.August2020.Blazor.Validators
@using System.Threading
@using Hsf.ApplicationProcess.August2020.Blazor.Extensions
@using Hsf.ApplicationProcess.August2020.Blazor.Models

@inject ApplicantInsertModelValidator Val
@inject ApplicantApiService ApiService
@inject ToastGenerator ToastGenerator

<link rel="stylesheet" href="css/addApplicant.css" />
<h3>@Translator.header_new_applicant</h3>
<MatDivider></MatDivider>
<ApplicantInsertModelValidationForm Applicant="Applicant" FormValidityChanged="OnFormValidityChanged" Validator="Val">
</ApplicantInsertModelValidationForm>

<MatButton Label="@Translator.button_l_submit" OnClick="InsertApplicant" Disabled="@_isSubmitButtonDisabled" Type="submit"></MatButton>
<MatButton Label="@Translator.button_l_reset" Disabled="@IsResetDisabled" OnClick="@ResetData"></MatButton>

@code {
    [CascadingParameter]
    public I18nText.local Translator { get; set; }

    [Parameter]
    public ApplicantInsertModel Applicant { get; set; } = new ApplicantInsertModel() { familyName = "asdasdasdasd", address = "asdasdasdasd", age = 22, emailAddress = "heniuw@wp.pl", name = "asdasasdasdasd" };
    

    private bool _isSubmitButtonDisabled = true;
    private bool IsResetDisabled => Applicant.IsDefault();


    private void ResetData()
    {
        Applicant = new ApplicantInsertModel();
        _isSubmitButtonDisabled = true;
    }

    void OnFormValidityChanged(bool validity)
    {
        _isSubmitButtonDisabled = !validity;
    }

    private async Task<PostInfo> InsertApplicant()
    {
        if (!_isSubmitButtonDisabled)
        {
            _isSubmitButtonDisabled = true;
            var postResult = await ApiService.InsertNewApplicant(Applicant, CancellationToken.None);
            if (postResult.IsSuccess)
            {
                ToastGenerator.DisplayInfo(Translator.toast_h_applicant_added, Translator.toast_m_applicant_added + Applicant.fullName);
                _isSubmitButtonDisabled = false;
            }
            else if (postResult.IsConnectionError)
            {
                ToastGenerator.DisplayConnectionError(Translator.toast_h_connection_err, Translator.toast_m_connection_err, async () => await InsertApplicant());
                _isSubmitButtonDisabled = false;
            }
            else
            {
                ToastGenerator.DisplayPostInfoErrors(Translator.toast_h_bad_param_sent, Translator.toast_m_bad_param_sent, postResult);
            }
            return postResult;
        }
        return null;
    }
}