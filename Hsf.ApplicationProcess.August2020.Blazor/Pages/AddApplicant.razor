@*@page "/addapplicant"*@
@page "/"
@using Hsf.ApplicationProcess.August2020.Blazor.ApiServices
@using System.Runtime.CompilerServices
@using Hsf.ApplicationProcess.August2020.Blazor.Validators
@using Hsf.ApplicationProcess.August2020.Domain.Validators
@using System.Threading
@using System.Timers
@using FluentValidation
@using FluentValidation.Results
@using Hsf.ApplicationProcess.August2020.Blazor.Models
@using Timer = System.Threading.Timer

@inject ApplicantInsertModelValidator Val
@inject ApplicantApiService ApiService
@inject ToastGenerator ToastGenerator
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<link rel="stylesheet" href="css/addApplicant.css" />

<div class="mat-elevation-z3 main-container">
    <h3>@_translator.header_new_applicant</h3>

    <EditForm Model="applicant">
        <FluentValidator Validator="Val"></FluentValidator>

        <div class="mat-layout-grid mat-layout-grid-align-left">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5" style="min-width: 250px">
                    <p><MatTextField Label="Name" @bind-Value="@applicant.name"></MatTextField></p>
                    <p><ValidationMessage For="@(() => applicant.name)" /></p>
                    <p><MatTextField Label="Family name" @bind-Value="@applicant.familyName"></MatTextField></p>
                    <p><ValidationMessage For="@(() => applicant.familyName)" /></p>
                    <p><MatTextField Label="Address" @bind-Value="@applicant.address"></MatTextField></p>
                    <p><ValidationMessage For="@(() => applicant.address)" /></p>
                    <p><MatTextField Label="Country" @bind-Value="@applicant.countryOfOrigin"></MatTextField></p>
                    <p><ValidationMessage For="@(() => applicant.countryOfOrigin)" /></p>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1" style="min-width: 50px"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5" style="min-width: 250px">
                    <p><MatNumericUpDownField Label="Age" DecimalPlaces=0 Minimum="20" Maximum="60" @bind-Value="@applicant.age"></MatNumericUpDownField></p>
                    <p><ValidationMessage For="@(() => applicant.age)" /></p>
                    <p><MatTextField Label="Email address" @bind-Value="@applicant.emailAddress"></MatTextField></p>
                    <p><ValidationMessage For="@(() => applicant.emailAddress)" /></p>
                    <br />
                    <p><MatSlideToggle Label="Status" @bind-Value="@applicant.hired"></MatSlideToggle></p>
                </div>
            </div>
            <MatDivider></MatDivider>
            <MatButton Label="Submit" OnClick="InsertApplicant" Disabled="@IsSubmitDisabled" Type="submit"></MatButton>
            <MatButton Label="Reset" Disabled="@IsResetDisabled" OnClick="@ResetData"></MatButton>
        </div>
    </EditForm>
</div>
@code {

    ApplicantInsertModel applicant = new ApplicantInsertModel() { address = "adressadress", age = 25, emailAddress = "heniuw@wp.pl", familyName = "Wiśniewski", name = "Endrju" };

    private bool IsResetDisabled => string.IsNullOrEmpty(applicant.address) &&
                                    string.IsNullOrEmpty(applicant.countryOfOrigin) &&
                                    string.IsNullOrEmpty(applicant.emailAddress) &&
                                    string.IsNullOrEmpty(applicant.familyName) &&
                                    string.IsNullOrEmpty(applicant.name) &&
                                    applicant.age == 0;

    private bool IsSubmitDisabled = true;

    private System.Timers.Timer _guiUpdateTimer;
    I18nText.local _translator = new I18nText.local();

    private void ResetData()
    {
        applicant = new ApplicantInsertModel();
        IsSubmitDisabled = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Val.CascadeMode = CascadeMode.Stop;
    }

    // Asynchronous fluent validation is not supported in blazor WASM at this moment
    // Workaround is needed - force refresh so gui can be updated in case of validation over api
    private System.Timers.Timer timer;
    protected override async Task OnInitializedAsync()
    {
        _translator = await I18nText.GetTextTableAsync<I18nText.local>(this);
        _guiUpdateTimer = new System.Timers.Timer(500);
        _guiUpdateTimer.Elapsed += OnTimedEvent;
        _guiUpdateTimer.AutoReset = true;
        _guiUpdateTimer.Enabled = true;
        _guiUpdateTimer.Start();
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        Task.Run(async () =>
        {
            await Update();
            StateHasChanged();
        });
    }

    private async Task Update()
    {
        var result = await Val.ValidateAsync(applicant);
        IsSubmitDisabled = !result.IsValid;
        StateHasChanged();
    }

    private async Task<PostInfo> InsertApplicant()
    {
        _guiUpdateTimer.Stop();
        if (!IsSubmitDisabled)
        {
            IsSubmitDisabled = true;
            StateHasChanged();
            var postResult = await ApiService.InsertNewApplicant(applicant, CancellationToken.None);
            if (postResult.IsSuccess)
            {
                StateHasChanged();
                ToastGenerator.DisplayInfo("Applicant added!", applicant.name + " " + applicant.familyName + " " + "has been added to database.");
            }
            else
            {
                StateHasChanged();
                ToastGenerator.DisplayConnectionError(async () => await InsertApplicant());
            }
            _guiUpdateTimer.Start();
            return postResult;
        }
        _guiUpdateTimer.Start();
        return null;
    }
}