@page "/getbyid"
@using Hsf.ApplicationProcess.August2020.Blazor.Models
@using Hsf.ApplicationProcess.August2020.Blazor.Validators
@using Hsf.ApplicationProcess.August2020.Blazor.ApiServices
@using Hsf.ApplicationProcess.August2020.Blazor.Extensions
@using System.Threading

@inject ApplicantInsertModelValidator Val
@inject ToastGenerator ToastGenerator
@inject ApplicantApiService ApiServices

<link rel="stylesheet" href="css/addApplicant.css" />
<h3>@Translator.header_view_applicants</h3>
<MatDivider></MatDivider>
<ApplicantInsertModelValidationForm Applicant="Applicant" Validator="Val" FormValidityChanged="OnFormValidityChanged"></ApplicantInsertModelValidationForm>
<div style="display: block; width: 100%; position: relative;">
    <MatButton Label="Previous" Disabled="@IsPreviousEnabled" Type="submit" OnClick="@GetPreviousId"></MatButton>
    <MatButton Label="Update" OnClick="@UpdateApplicant" Disabled="@_isUpdateDisabled"></MatButton>
    <MatButton Label="Next" Disabled="@IsNextEnabled" OnClick="@GetNextId"></MatButton>
    <MatNumericUpDownField IconOnClick="GetWithCurrentId" @onchange="IdChangedByNumField" OnKeyPress="GetWithCurrentIdByEnter" style="max-width: 100px;" @bind-Value="@_id" Minimum="1" Maximum="@int.MaxValue" Dense="true"></MatNumericUpDownField>
</div>

@code {
    [CascadingParameter]
    I18nText.local Translator { get; set; }

    [Parameter]
    public ApplicantInsertModel Applicant { get; set; } = new ApplicantInsertModel();

    private bool IsPreviousEnabled => _id <= 1;
    private bool IsNextEnabled => _id == int.MaxValue;
    private bool _isUpdateDisabled = true;

    private int _id;
    private int _lastGoodId;

    private async Task GetNextId() => await GetApplicantWithId(++_id);

    private async Task GetPreviousId() => await GetApplicantWithId(--_id);

    private async Task GetWithCurrentIdByEnter(KeyboardEventArgs e)
    {
        await Task.Delay(1); // yield so the parameter can be updated with given ui value
        if (e.Key == "Enter")
            await GetApplicantWithId(_id);
    }

    private async Task GetWithCurrentId()
    {
        await GetApplicantWithId(_id);
        StateHasChanged();
    }

    private void OnFormValidityChanged(bool isValid)
    {
        _isUpdateDisabled = !isValid;
    }

    private async Task GetApplicantWithId(int id)
    {
        StateHasChanged();
        var result = await ApiServices.GetApplicantById(id, new CancellationTokenSource(5000).Token);
        if (result.IsSuccess)
        {
            Applicant = result.GetRetrievedData.ToApplicantInsertModel();
            _id = result.GetRetrievedData.ID;
            StateHasChanged();
        }
        else if (result.IsNotFound)
        {
            ToastGenerator.DisplayInfo(Translator.toast_h_not_found, Translator.toast_m_not_found + $"{result.ResponseCodes.FirstOrDefault().Value.First()}");
        }
        else
        {
            ToastGenerator.DisplayConnectionError(Translator.toast_h_connection_err, Translator.toast_m_connection_err_get);
        }
        StateHasChanged();
    }

    private async Task<ApiInfoWithApplicantData> UpdateApplicant()
    {
        if (_isUpdateDisabled)
            return null;

        _isUpdateDisabled = true;
        var postResult = await ApiServices.UpdateApplicant(_id, Applicant, new CancellationTokenSource(5000).Token);
        if (postResult.IsSuccess)
        {
            _lastGoodId = _id;
            ToastGenerator.DisplaySuccess(Translator.toast_h_applicant_updated, Translator.toast_m_applicant_updated + Applicant.fullName);
            _isUpdateDisabled = false;
        }
        else if (postResult.IsConnectionError)
        {
            ToastGenerator.DisplayConnectionError(Translator.toast_h_connection_err, Translator.toast_m_connection_err_add, async () => await UpdateApplicant());
            _isUpdateDisabled = false;
            _id = _lastGoodId;
        }
        else
        {
            ToastGenerator.DisplayPostInfoErrors(Translator.toast_h_bad_param_sent, Translator.toast_m_bad_param_sent, postResult);
            _id = _lastGoodId;
        }
        StateHasChanged();
        return postResult;
    }

    private void IdChangedByNumField(ChangeEventArgs e)
    {
        _id = (int)e.Value;
        StateHasChanged();
    }
}