@page "/getbyid"
@using Hsf.ApplicationProcess.August2020.Blazor.Models
@using Hsf.ApplicationProcess.August2020.Blazor.Validators
@using Hsf.ApplicationProcess.August2020.Domain.Models
@using Hsf.ApplicationProcess.August2020.Blazor.ApiServices
@using Hsf.ApplicationProcess.August2020.Blazor.Extensions
@using System.Threading

@inject ApplicantInsertModelValidator Val
@inject ToastGenerator ToastGenerator
@inject ApplicantApiService ApiServices

<link rel="stylesheet" href="css/addApplicant.css" />
<h3>@Translator.header_view_applicants</h3>
<MatDivider></MatDivider>
<ApplicantInsertModelValidationForm Applicant="Applicant" Validator="Val" FormValidityChanged="OnFormValidityChanged"></ApplicantInsertModelValidationForm>
<div>
    <MatButton Label="Previous" Type="submit" OnClick="GetApplicantWithId"></MatButton>
    <MatButton Label="Update" Disabled="@_isUpdateDisabled"></MatButton>
    <MatButton Label="Next"></MatButton>
    <MatNumericUpDownField style="max-height: 25px; padding-bottom: -15px;" @bind-Value="@Id" Dense="true"></MatNumericUpDownField>
</div>

@code {
    [CascadingParameter]
    I18nText.local Translator { get; set; }

    [Parameter]
    public ApplicantInsertModel Applicant { get; set; } = new ApplicantInsertModel();

    private bool _isPreviousEnabled;
    private bool _isNext;
    private bool _isUpdateDisabled = true;

    private Applicant ApplicantWithId { get; set; } = new Applicant();

    public int Id { get; set; } = 3;

    private void OnFormValidityChanged(bool isValid)
    {
        _isUpdateDisabled = !isValid;
    }

    private async Task GetApplicantWithId()
    {
        StateHasChanged();
        var result = await ApiServices.GetApplicantById(Id, CancellationToken.None);
        if (result.IsSuccess)
        {
            Applicant = result.GetRetrievedData.ToApplicantInsertModel();
            Id = result.GetRetrievedData.ID;
            StateHasChanged();
        }
        else
        {
            ToastGenerator.DisplayPostInfoErrors(Translator.toast_h_bad_param_sent, Translator.toast_m_bad_param_sent, result);
        }
    }

}