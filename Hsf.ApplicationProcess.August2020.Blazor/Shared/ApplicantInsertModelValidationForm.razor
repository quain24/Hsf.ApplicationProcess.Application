@using Hsf.ApplicationProcess.August2020.Blazor.Models
@using FluentValidation.Results
@using Hsf.ApplicationProcess.August2020.Blazor.Validators
@using System.Timers
@using FluentValidation

@implements IDisposable
<link rel="stylesheet" href="css/addApplicant.css" />
<div style="display: block">
    <EditForm Model="Applicant">
        <FluentValidator Validator="Validator"></FluentValidator>

        <div class="mat-layout-grid mat-layout-grid-align-left">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5" style="min-width: 250px">
                    <p><MatTextField OnFocus="Editing" OnFocusOut="NotEditing" Label="@Translator.field_name" @bind-Value="@Applicant.name"></MatTextField></p>
                    <p><ValidationMessage For="@(() => Applicant.name)" /></p>
                    <p><MatTextField OnFocus="Editing" OnFocusOut="NotEditing" Label="@Translator.field_surname" @bind-Value="@Applicant.familyName"></MatTextField></p>
                    <p><ValidationMessage For="@(() => Applicant.familyName)" /></p>
                    <p><MatTextField OnFocus="Editing" OnFocusOut="NotEditing" Label="@Translator.field_address" @bind-Value="@Applicant.address"></MatTextField></p>
                    <p><ValidationMessage For="@(() => Applicant.address)" /></p>
                    <p><MatTextField OnFocus="Editing" OnFocusOut="NotEditing" Label="@Translator.field_country" @bind-Value="@Applicant.countryOfOrigin"></MatTextField></p>
                    @if (_isCountryErrVisible)
                    {<p id="err-container">@Translator.field_err_country</p>}
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1" style="min-width: 50px"></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5" style="min-width: 250px">
                    <p><MatNumericUpDownField OnFocus="Editing" OnFocusOut="NotEditing" Label="@Translator.field_age" DecimalPlaces="0" Minimum="20" Maximum="60" @bind-Value="Applicant.age"></MatNumericUpDownField></p>
                    <p><ValidationMessage For="@(() => Applicant.age)" /></p>
                    <p><MatTextField OnFocus="Editing" OnFocusOut="NotEditing" Label="@Translator.field_email" @bind-Value="@Applicant.emailAddress"></MatTextField></p>
                    <p><ValidationMessage For="@(() => Applicant.emailAddress)" /></p>
                    <br />
                    <p><MatSlideToggle Label="@Translator.field_status_hired" @bind-Value="@Applicant.hired"></MatSlideToggle></p>
                </div>
            </div>
            <MatDivider></MatDivider>
        </div>
    </EditForm>
</div>
@code {
    private bool _lastValidationState = false;
    private bool _isCountryErrVisible = false;
    private float _ageMiddleware = 0;

    // Asynchronous fluent validation is not supported in blazor WASM at this moment
    // Workaround is needed - force refresh so gui can be updated in case of validation over api
    public ApplicantInsertModelValidationForm()
    {
        GuiUpdateTimer = new Timer(500);
        GuiUpdateTimer.Elapsed += OnTimedEvent;
        GuiUpdateTimer.AutoReset = true;
        GuiUpdateTimer.Enabled = true;
        GuiUpdateTimer.Start();
        _isCountryErrVisible = false;
    }

    private Timer GuiUpdateTimer { get; set; }

    [CascadingParameter]
    public I18nText.local Translator { get; set; }

    [Parameter]
    public ApplicantInsertModel Applicant { get; set; }

    [Parameter]
    public EventCallback<bool> FormValidityChanged { get; set; }

    [Parameter]
    public ApplicantInsertModelValidator Validator { get; set; }

    protected override void OnParametersSet()
    {
        //Validator.CascadeMode = CascadeMode.Stop;
    }

    private async Task Update(bool force = false)
    {
        var result = await Validator.ValidateAsync(Applicant);
        EnableIfNeededCountryErrMsg(result);
        StateHasChanged();
        if (_lastValidationState != result.IsValid || force)
        {
            _lastValidationState = result.IsValid;
            await OnFormValidityChanged(result.IsValid);
        }
    }

    private async Task Editing() => await OnFormValidityChanged(false);

    private async Task NotEditing() => await Update(true);

    private void EnableIfNeededCountryErrMsg(ValidationResult result)
    {
        _isCountryErrVisible = (result?.Errors?.Any(c =>
            c.ErrorCode == Global.ValidatorConstants.CountryErrorCode) ?? true) && Applicant?.countryOfOrigin?.Length > 0;
    }

    async Task OnFormValidityChanged(bool valid)
    {
        if (FormValidityChanged.HasDelegate)
            await FormValidityChanged.InvokeAsync(valid);
        StateHasChanged();
    }

    private void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        Task.Run(async () => await Update());
    }

    public void Dispose()
    {
        GuiUpdateTimer?.Stop();
        GuiUpdateTimer?.Dispose();
        if (GuiUpdateTimer != null) GuiUpdateTimer.Elapsed -= OnTimedEvent;
    }
}